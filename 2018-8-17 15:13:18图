//邻接表定义、创建
typedef char VertexType;    //边上权值类型
typedef int EdgeType;       //定点类型，由用户定义

typedef struct EdgeNode{    //边表节点，
  int adjvex;               //邻接点域，存在该节点对应的下标
  struct EdgeNode *next;    //链域，指向下一个邻接点
}EdgeNode;

typedef struct VertexNode{  //顶点表节点
  VertexType data;          //顶点域，存储顶点信息
  EdgeNode *firstedge;      //边表头指针
}VertexNode,AdjLIst[MAXVEX];

typedef struct{
  AdjList adjlist;
  int numVertexs,numEdges;  //途中当前顶点数和边数
}GraphAdjList;


//创建邻接表，借鉴大话
void CreatALGraph(GraphAdjList &G){
  int i,j,k;
  EdgeNode *e;
  printf("输入顶点数和边数:\n");
  scanf("%d,%d",&G->numVertexs,&G->numEdges);
  for(i=0;i<G->numVertexs;i++){
    scanf(&G->adjlist[i].data);
    G->adjlist[i].firstedge=NULL;
  }
  for(k=o;k<G->numEdges;k++){
    printf("输入边（vi,vj）上的顶点序号：\n");
    scanf("%d,%d",&i,&j);
    e=(EdgeNode*)malloc(sizeof(EdgeNode));
    e->adjvex=j;
    e->next=G->adjlist[i].firstedge;
    G->adjlist[i].firstedge=e;
    e=(EdgeNode*)malloc(sizeof(EdgeNode));
    e->adjvex=i;
    e->next=G->adjlist[j].firstedge
    G->adjlist[j].firstedge=e;
  }
}
