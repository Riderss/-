typedef struct{
  ElemType data;
  int pos;
}STree[MaxSize];
typedef struct tnode{
  ElemType data;
  struct tnode *child[M];
}CTree;
typedef struct cbnode{
  ElemType data;
  struct cbnode child;
  struct cbnode brother;
}cbtree;


//先序序列构造二叉树
void PreOrder(BTNode *b){
  if(b!=NULL){
    printf("%d",b->data);
    PreOrder(b->lchild);
    PreOrder(b->rchild);
  }
}

void PreOrder(BTNode *b){
  BTNode *St[MaxSize]，*p;
  int top=-1;
  if(b!=NULL){
    top++;                        //根节点进栈
    St[top]=b;
    while(top>-1){                //栈不空时循环
      p=St[top];                  //退栈并访问该节点
      top--;
      printf("%c",p->data);
      if(p->rchild!=NULL){        //右孩子进栈，，，因为是根左右的顺序，所以先进右孩子（先进后出）
        top++;
        St[top]=p->rchild;
      }
       if(p->lchild!=NULL){       //左孩子进栈
        top++;
        St[top]=p->lchild;
      }
    }
    printf("\n");
  }
}


//后续遍历费低轨
void PostOrder(BTree *b){
  BTree *St[Maxsize],*p;
  int top=-1,flag;
  if(b！=NULL){
    do{
      while(b!=NULL){
        top++;
        St[top]=b;
        b=b->lchild;  
      }
      p=NULL;
      flag=1;
      while(top!=-1&&flag){
        b=St[top];
        if(b->rchild==p)
        {  printf("%c",b->data);
           top--;
           p=b;
        }
        else{
           b=b->rchild;
           flag=0;
        }
      }
    }while(top!=-1);
    printf("\n");
  }
}  
//层次遍历
void LeverOrder(BTNode *b){
  BTNode *p;
  BTNode *qu[Maxsize];
  int front,rear;
  front=rear=0;
  rear++;
  qu[rear]=b;
  while(front!=rear){
    front=(front+1)%Maxsize;
    p=qu[front];
    printf("%c",p->data);
    if(p->lchild!=NULL){
      rear=(rear+1)%Maxsize;
      qu[rear]=p->lchild;
    }
    if(p->rchild!=NULL){
      rear=(rear+1)%Maxsize;
      qu[rear]=p->rchild;
    }
  }
}
  
void CreatBTNode(BTNode *&b,char *str){
  BTNode *St[maxsize],*p=NULL;
  int top=-1,k,j=0;char ch;
  b=NULL;
  ch=str[j];
  while(ch!='\0'){
    switch(ch){
      case'(':top++,St[top]=p;k=1;break;
      case')':top--;break;
      case',':k=2;break;
      default:p=(BTNode *)malloc(sizeof(BTNode));
        p->data=ch;p->lchild=p->rchild=NULL;
        if(b==NULL)b=p;
        else{
          switch(k){
            case1:St[top]->lchild=p;break;
            case2:St[top]->rchild=p;break;
          }
        }
    }
    ch=str[++j];
  }
} 
  
